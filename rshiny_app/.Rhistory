4
source_python('/home/gassmann/PycharmProjects/NMF-script/main.py')
z = subset(df_document_vector, modele=='blend_model')
d = subset(df_document_vector_before, modele=='blend_model')
dplyr::count(z, cluster, sort = TRUE)
name_model = 'blend_model'
group = 8L
k_topics = 5L
z = subset(z, cluster==group)
d = subset(d, cluster==group)
a = subset(df_label, modele=='blend_model' & cluster == group & choix == 1)$label
print(a)
top_topic_terms_t = nmf_for_one_topic(d, z, k_topics)
table(as.vector(top_topic_terms_t[[2]]))
keep_group = list(1L)
data_new = keep_topic(group, keep_group, top_topic_terms_t[[1]], top_topic_terms_t[[2]], name_model, fasttext[[1]], fasttext[[2]],df_document_vector_before, df_document_vector, top_topic_terms, df_informations, df_sim_termes_topic, df_sim_doc_topic, df_word_cluster_tf, df_word_cluster_tfidf, df_label)
df_document_vector_before_new = data_new[[1]]
df_document_vector_new = data_new[[2]]
top_topic_terms_new = data_new[[3]]
X_df = data_new[[4]]
df_sim_termes_topic_new = data_new[[5]]
df_sim_doc_topic_new = data_new[[6]]
df_informations_new = data_new[[7]]
df_word_cluster_tf_new = data_new[[8]]
df_word_cluster_tfidf_new = data_new[[9]]
df_label_new = data_new[[10]]
top_topic_terms_t
top_topic_terms_t = nmf_for_one_topic(d, z, k_topics)
d
d
z
d$cluster
z$cluster
source_python('/home/gassmann/PycharmProjects/NMF-script/main.py')
z = subset(df_document_vector, modele=='blend_model')
d = subset(df_document_vector_before, modele=='blend_model')
dplyr::count(z, cluster, sort = TRUE)
name_model = 'blend_model'
group = 8L
k_topics = 5L
z = subset(z, cluster==group)
d = subset(d, cluster==group)
a = subset(df_label, modele=='blend_model' & cluster == group & choix == 1)$label
print(a)
top_topic_terms_t = nmf_for_one_topic(d, z, k_topics)
table(as.vector(top_topic_terms_t[[2]]))
keep_group = list(1L)
data_new = keep_topic(group, keep_group, top_topic_terms_t[[1]], top_topic_terms_t[[2]], name_model, fasttext[[1]], fasttext[[2]],df_document_vector_before, df_document_vector, top_topic_terms, df_informations, df_sim_termes_topic, df_sim_doc_topic, df_word_cluster_tf, df_word_cluster_tfidf, df_label)
df_document_vector_before_new = data_new[[1]]
df_document_vector_new = data_new[[2]]
top_topic_terms_new = data_new[[3]]
X_df = data_new[[4]]
df_sim_termes_topic_new = data_new[[5]]
df_sim_doc_topic_new = data_new[[6]]
df_informations_new = data_new[[7]]
df_word_cluster_tf_new = data_new[[8]]
df_word_cluster_tfidf_new = data_new[[9]]
df_label_new = data_new[[10]]
source_python('/home/gassmann/PycharmProjects/NMF-script/main.py')
z = subset(df_document_vector, modele=='blend_model')
d = subset(df_document_vector_before, modele=='blend_model')
dplyr::count(z, cluster, sort = TRUE)
name_model = 'blend_model'
group = 8L
k_topics = 5L
z = subset(z, cluster==group)
d = subset(d, cluster==group)
a = subset(df_label, modele=='blend_model' & cluster == group & choix == 1)$label
print(a)
top_topic_terms_t = nmf_for_one_topic(d, z, k_topics)
top_topic_terms_t[[3]]
a = subset(df_label, modele=='blend_model' & cluster == group & choix == 1)$label
print(a)
top_topic_terms_t = nmf_for_one_topic(d, z, k_topics)
if (top_topic_terms_t[[3]] == TRUE){
table(as.vector(top_topic_terms_t[[2]]))
keep_group = list(1L)
data_new = keep_topic(group, keep_group, top_topic_terms_t[[1]], top_topic_terms_t[[2]], name_model, fasttext[[1]], fasttext[[2]],df_document_vector_before, df_document_vector, top_topic_terms, df_informations, df_sim_termes_topic, df_sim_doc_topic, df_word_cluster_tf, df_word_cluster_tfidf, df_label)
df_document_vector_before_new = data_new[[1]]
df_document_vector_new = data_new[[2]]
top_topic_terms_new = data_new[[3]]
X_df = data_new[[4]]
df_sim_termes_topic_new = data_new[[5]]
df_sim_doc_topic_new = data_new[[6]]
df_informations_new = data_new[[7]]
df_word_cluster_tf_new = data_new[[8]]
df_word_cluster_tfidf_new = data_new[[9]]
df_label_new = data_new[[10]]
}
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
dplyr::count(z, cluster, sort = TRUE)
dplyr::count(df_document_vector, cluster, sort = TRUE)
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
source_python('/home/gassmann/PycharmProjects/NMF-script/main.py')
View(tuple_topics)
df_label_ = subset(df_label, modele=='blend_model'  & choix == 1)$label
tuple_topics = top_sim_topics(matrice_sim_topics_blend_model, df_label_)
df_label_ = subset(df_label, modele=='blend_model'  & choix == 1)
tuple_topics = top_sim_topics(matrice_sim_topics_blend_model, df_label_)
tuple_topics[[1]]
data_new = assembler_tuple_topics(tuple_topics[[1]], name_model, fasttext[[1]], fasttext[[2]],df_document_vector_before, df_document_vector, top_topic_terms, df_informations, df_sim_termes_topic, df_sim_doc_topic, df_word_cluster_tf, df_word_cluster_tfidf, df_label)
df_document_vector_before_new = data_new[[1]]
df_document_vector_new = data_new[[2]]
top_topic_terms_new = data_new[[3]]
X_df = data_new[[4]]
df_sim_termes_topic_new = data_new[[5]]
df_sim_doc_topic_new = data_new[[6]]
df_informations_new = data_new[[7]]
df_word_cluster_tf_new = data_new[[8]]
df_word_cluster_tfidf_new = data_new[[9]]
df_label_new = data_new[[10]]
View(df_label_new)
View(X_df)
View(matrice_sim_topics_blend_model)
df_label$modele
df_label$modele[1]
tuple_topics[[1]]
c(tuple_topics[[1]][[1]],tuple_topics[[1]][[2]])
1:2
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
source_python('/home/gassmann/PycharmProjects/NMF-script/main.py')
z = subset(df_document_vector, modele=='blend_model')
d = subset(df_document_vector_before, modele=='blend_model')
dplyr::count(df_document_vector, cluster, sort = TRUE)
name_model = 'blend_model'
group = 8L
k_topics = 5L
z = subset(z, cluster==group)
d = subset(d, cluster==group)
a = subset(df_label, modele=='blend_model' & cluster == group & choix == 1)$label
print(a)
df_label_ = subset(df_label, modele=='blend_model'  & choix == 1)
tuple_topics = top_sim_topics(matrice_sim_topics_blend_model, df_label_)
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
source_python('/home/gassmann/PycharmProjects/NMF-script/main.py')
matrice_sim_topics_blend_model
df_label_ = subset(df_label, modele=='blend_model'  & choix == 1)
tuple_topics = top_sim_topics(matrice_sim_topics_blend_model, df_label_)
tuple_topics
data_new = assembler_tuple_topics(tuple_topics[[1]], name_model, fasttext[[1]], fasttext[[2]],df_document_vector_before, df_document_vector, top_topic_terms, df_informations, df_sim_termes_topic, df_sim_doc_topic, df_word_cluster_tf, df_word_cluster_tfidf, df_label)
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
z = subset(df_document_vector, modele=='blend_model')
d = subset(df_document_vector_before, modele=='blend_model')
dplyr::count(df_document_vector, cluster, sort = TRUE)
name_model = 'blend_model'
group = 8L
k_topics = 5L
z = subset(z, cluster==group)
d = subset(d, cluster==group)
a = subset(df_label, modele=='blend_model' & cluster == group & choix == 1)$label
print(a)
df_label_ = subset(df_label, modele=='blend_model'  & choix == 1)
tuple_topics = top_sim_topics(matrice_sim_topics_blend_model, df_label_)
data_new = assembler_tuple_topics(tuple_topics[[1]], name_model, fasttext[[1]], fasttext[[2]],df_document_vector_before, df_document_vector, top_topic_terms, df_informations, df_sim_termes_topic, df_sim_doc_topic, df_word_cluster_tf, df_word_cluster_tfidf, df_label)
df_document_vector_before_new = data_new[[1]]
df_document_vector_new = data_new[[2]]
top_topic_terms_new = data_new[[3]]
X_df = data_new[[4]]
df_sim_termes_topic_new = data_new[[5]]
df_sim_doc_topic_new = data_new[[6]]
df_informations_new = data_new[[7]]
df_word_cluster_tf_new = data_new[[8]]
df_word_cluster_tfidf_new = data_new[[9]]
df_label_new = data_new[[10]]
top_topic_terms_t = nmf_for_one_topic(d, z, k_topics)
if (top_topic_terms_t[[3]] == TRUE){
table(as.vector(top_topic_terms_t[[2]]))
keep_group = list(1L)
data_new = keep_topic(group, keep_group, top_topic_terms_t[[1]], top_topic_terms_t[[2]], name_model, fasttext[[1]], fasttext[[2]],df_document_vector_before_new, df_document_vector_new, top_topic_terms_new, df_informations_new, df_sim_termes_topic_new, df_sim_doc_topic_new, df_word_cluster_tf_new, df_word_cluster_tfidf_new, df_label_new)
df_document_vector_before_new = data_new[[1]]
df_document_vector_new = data_new[[2]]
top_topic_terms_new = data_new[[3]]
X_df = data_new[[4]]
df_sim_termes_topic_new = data_new[[5]]
df_sim_doc_topic_new = data_new[[6]]
df_informations_new = data_new[[7]]
df_word_cluster_tf_new = data_new[[8]]
df_word_cluster_tfidf_new = data_new[[9]]
df_label_new = data_new[[10]]
}
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
z = subset(df_document_vector, modele=='blend_model')
d = subset(df_document_vector_before, modele=='blend_model')
dplyr::count(df_document_vector, cluster, sort = TRUE)
name_model = 'blend_model'
group = 8L
k_topics = 5L
z = subset(z, cluster==group)
d = subset(d, cluster==group)
a = subset(df_label, modele=='blend_model' & cluster == group & choix == 1)$label
print(a)
df_label_ = subset(df_label, modele=='blend_model'  & choix == 1)
tuple_topics = top_sim_topics(matrice_sim_topics_blend_model, df_label_)
data_new = assembler_tuple_topics(tuple_topics[[1]], name_model, fasttext[[1]], fasttext[[2]],df_document_vector_before, df_document_vector, top_topic_terms, df_informations, df_sim_termes_topic, df_sim_doc_topic, df_word_cluster_tf, df_word_cluster_tfidf, df_label)
df_document_vector_before_new = data_new[[1]]
df_document_vector_new = data_new[[2]]
top_topic_terms_new = data_new[[3]]
X_df = data_new[[4]]
df_sim_termes_topic_new = data_new[[5]]
df_sim_doc_topic_new = data_new[[6]]
df_informations_new = data_new[[7]]
df_word_cluster_tf_new = data_new[[8]]
df_word_cluster_tfidf_new = data_new[[9]]
df_label_new = data_new[[10]]
subset(df_label_new, modele='blend_model')
subset(df_label_new, modele=='blend_model')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
tuple_topics
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
list(0,2)[1]
list(0,2)[[1]]
a = list()
a.append(5)
list.append(a,5)
a[[1]] = 5
a
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
shiny::runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
fasttext = ft_document_vector(subset(df_document_vector, modele==df_document_vector$modele[1])$terms, 1L, 200L, 5L)
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
top_termes_i = subset(top_topic_terms,modele='bert')
top_termes_i = subset(top_topic_terms,modele=='bert')
top_termes_i
top_termes_i = subset(top_termes_i, cluster == 22)
top_termes_i
a = top_termes_i$terms
b = top_termes_i$freq
reorder(as.character(a),rev(b))
fig <- plot_ly(x = reorder(as.character(top_termes_i$terms),rev(top_termes_i$freq)),y = top_termes_i$freq,
type = 'bar', color = I("rgba(153,51,204,1)"))
fig
rev(as.character(a))
fig <- plot_ly(x = rev(as.character(top_termes_i$terms)),y = top_termes_i$freq,
type = 'bar', color = I("rgba(153,51,204,1)"))
fig
fig <- plot_ly(x = as.character(top_termes_i$terms),y = top_termes_i$freq,
type = 'bar', color = I("rgba(153,51,204,1)"))
fig
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
shiny::runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
to_factor = function(x){
if (x %in% c('cluster','modele','choix')){
return(TRUE)
}
else{
return(FALSE)
}
}
lapply(df_label, to_factor)
to_factor = function(x){
if (names(x) %in% c('cluster','modele','choix')){
return(TRUE)
}
else{
return(FALSE)
}
}
lapply(df_label, to_factor)
to_factor = function(x){
if (x %in% c('cluster','modele','choix')){
return(TRUE)
}
else{
return(FALSE)
}
}
sapply(df_label, to_factor)
df_label['cluster']
df_label[c('cluster','g')]
df_label[c('cluster','modele')]
df_label[c('cluster','modele')] = lapply(df_label[c('cluster','modele')],as.factor)
df_label
lapply(names(df_label),to_factor)
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
round(2.3685745555,3)
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
1:10
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
df_label = read.csv(paste(path,'df_label_2.csv',sep=''))
#write.csv(df_label,paste0(path,'df_label_2.csv'), row.names=FALSE)
write.csv(df_label,paste0(path,'df_label.csv'), row.names=FALSE)
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
shiny::runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
fasttext = ft_document_vector(subset(df_document_vector, modele==df_document_vector$modele[1])$terms, 1L, 200L, 5L)
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
shiny::runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
df_informations
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
subset(df_label, df_label$modele == 'blend_model')
subset(top_topic_terms, modele == 'blend_model')
subset(df_document_vector_before, modele == 'blend_model')
subset(df_document_vector, modele == 'blend_model')
subset(df_informations, modele == 'blend_model')
runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
shiny::runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
n<- 1000
set.seed(11111) # fixer un germe pour avoir tous les mêmes données
X<-rnorm(n)
set.seed(22222) # fixer un germe pour avoir tous les mêmes données
U<-runif(n)
Y1<-rep(0,n)
Y1[X<=0 & U <=0.2]<-1
Y1[ X>0.3 &  U>seuil ]<-1
as.factor(Y1)
n<- 1000
set.seed(11111) # fixer un germe pour avoir tous les mêmes données
X<-rnorm(n)
set.seed(22222) # fixer un germe pour avoir tous les mêmes données
U<-runif(n)
Y1<-rep(0,n)
seuil = 0
Y1[X<=seuil & U <=0.2]<-1
Y1[ X>seuil &  U>0.3 ]<-1
Y<- as.factor(Y1)
donnees=data.frame(X,Y)
sel<-1:200
dtrain<-donnees[sel,]
dtest<-donnees[-sel,]
dtrain
library(car) # fonction Boxplot
Boxplot(data=dtrain,X~Y,main='Données apprentissage et validation')
install.packages("car")
library(car) # fonction Boxplot
Boxplot(data=dtrain,X~Y,main='Données apprentissage et validation')
install.packages("pbkrtest")
install.packages("lme4")
install.packages("minqa")
install.packages("lme4")
install.packages("pbkrtest")
install.packages("car")
library(car) # fonction Boxplot
Boxplot(data=dtrain,X~Y,main='Données apprentissage et validation')
n<- 1000
set.seed(11111) # fixer un germe pour avoir tous les mêmes données
X<-rnorm(n)
set.seed(22222) # fixer un germe pour avoir tous les mêmes données
U<-runif(n)
Y1<-rep(0,n)
seuil = 0
Y1[X<=seuil & U <=0.2]<-1
Y1[ X>seuil &  U>0.3 ]<-1
Y<- as.factor(Y1)
donnees=data.frame(X,Y)
sel<-1:200
dtrain<-donnees[sel,]
dtest<-donnees[-sel,]
library(car) # fonction Boxplot
Boxplot(data=dtrain,X~Y,main='Données apprentissage et validation')
Boxplot(data=dtest,X~Y,main='Echantillon test')
Boxplot(data=dtest,X~Y,main='Echantillon test')
shiny::runApp('Documents/NLP-TopicModeling/topiclabeling/src/app')
fasttext = ft_document_vector(subset(df_document_vector, modele==df_document_vector$modele[1])$terms, 1L, 200L, 5L)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='tarandro',
token='308EB95E0C85A4678772B10398C4D317',
secret='FXQlgtbMj3SIMRO5F5veRxHmyAyHz2D3hGpqbtLV')
install.packages('askpass')
rsconnect::setAccountInfo(name='tarandro',
token='308EB95E0C85A4678772B10398C4D317',
secret='FXQlgtbMj3SIMRO5F5veRxHmyAyHz2D3hGpqbtLV')
require(shiny)
require(shinydashboard)
require(shinyWidgets)
require(data.table)
require(magrittr)
require(DT)
require(plotly)
require(htmlwidgets)
require(reshape)
require(viridis)
require(sqldf)
library(shiny)
runApp()
setwd("~/Documents/NLP-TopicModeling/Topic-visualization/rshiny_app")
library(shiny)
runApp()
library(rsconnect)
rsconnect::deployApp('~/Documents/NLP-TopicModeling/Topic-visualization/rshiny_app')
runApp()
runApp()
rsconnect::deployApp('~/Documents/NLP-TopicModeling/Topic-visualization/rshiny_app')
