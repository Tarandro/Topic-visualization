" design the top terms presentation from a string_list of top terms "
string_list = gsub("'", "",string_list)
string_list = substring(string_list, 2)
string_list = strsplit(string_list,', ')
string_list = string_list[[1]]
message = ""
for (i in 1:n) {
if (i == 1) {
message = paste(message,string_list[i])
}
else{
message = paste(message, '-',string_list[i])
}
}
message = substring(message, 2)
return(message)
}
copy_df_hierarchy = copy(sub_hier)
copy_df_hierarchy$top_3 = unlist(lapply(copy_df_hierarchy$top_terms, get_top_terms, n=3))
View(copy_df_hierarchy)
View(sub_lab)
View(df_label)
runApp('Documents/NLP-TopicModeling/Topic-visualization/rshiny_app')
runApp('Documents/NLP-TopicModeling/Topic-visualization/rshiny_app')
View(copy_df_hierarchy)
View(df_hierarchy_top_terms)
runApp('Documents/NLP-TopicModeling/Topic-visualization/rshiny_app')
setwd("~/Documents/NLP-TopicModeling/Topic-visualization/rshiny_app")
library(rsconnect)
deployApp("~/Documents/NLP-TopicModeling/Topic-visualization/rshiny_app")
deployApp("~/Documents/NLP-TopicModeling/Topic-visualization/rshiny_app")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data
data
dt_topics$top_topic_terms_modele_cluster
dt_topics$top_topic_terms_modele_cluster$terms[1:4]
data$label
dt_topics$top_topic_terms_modele_cluster$terms[1:4][!dt_topics$top_topic_terms_modele_cluster$terms[1:4] %in% data$label]
dt_topics$top_topic_terms_modele_cluster$terms[1:4][!dt_topics$top_topic_terms_modele_cluster$terms[1:4] %in% data$label][1:1]
dt_topics$top_topic_terms_modele_cluster$terms[1:4][!dt_topics$top_topic_terms_modele_cluster$terms[1:4] %in% data$label][1:0]
choices = c(data$label,
dt_topics$top_topic_terms_modele_cluster$terms[1:4][!dt_topics$top_topic_terms_modele_cluster$terms[1:4] %in% data$label][1:(3-length(data$label))])
choices
choices = c(data$label,
dt_topics$top_topic_terms_modele_cluster$terms[1:4][!dt_topics$top_topic_terms_modele_cluster$terms[1:4] %in% data$label][1:(5-length(data$label))])
choices
shiny::runApp()
shiny::runApp()
shiny::runApp()
label_i
df_document_vector_reactive
df_word_cluster_i
input$select_nb_topterms
input$select_lim_top_termes
label_i
label_i
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
subset_df_label
length(subset_df_label$label)
for (nb_topic in 1:length(subset_df_label$label)) {
proba = max(subset_df_document_vector_col[idx_text,])
sum_proba = sum_proba + proba
if (proba > 0.1 ) {
number_of_topic = number_of_topic + 1
col = argmax(subset_df_document_vector_col[idx_text,])[[1]]
name_col = columns_names[col]
# label :
#html = paste0(html,"<span style='text-align:center;width: 100%;background-color:",all_color[col],";color:black;border-radius: 5px;border: 2px solid #000000'>")
#html = paste0(html,' &nbsp; ',subset_df_label$label[col], ' (',round(proba,3),') &nbsp;')
#html = paste0(html,"</span>", ' ')
subset_df_document_vector_col[idx_text,col] = -1
html = paste(html, as.character(actionButton(subset_df_label$label[col], paste0(' ',subset_df_label$label[col],' (',round(proba,3),') '),
onclick = paste0("Shiny.onInputChange(\'select_button_doc\','",subset_df_label$label[col],"')"),
style=paste0("text-align:center;width: 20%;background-color:",all_color[col],";color:black;border-radius: 5px;border: 2px solid #000000"))))
# top terms à surligner
df_word_cluster_i = df_word_cluster[,c('terms',columns_names[col])]
df_word_cluster_i = df_word_cluster_i[order(-df_word_cluster_i[,columns_names[col]]),]
top_terms = df_word_cluster_i$terms[1:lim_top_termes]
## tri-grams :
trigrams=3
nb_max_na = 4
for (i in 1:length(text_lemmatize)) {
if (!is.na(text_lemmatize[i])) {
j = i
condition = F
while (condition == F & j < i + nb_max_na) {
j = j+1
if (sum(!is.na(text_lemmatize[i:j]))==trigrams) {
condition = T
}
}
if (condition) {
ngrams = text_lemmatize[i]
for (word in text_lemmatize[(i+1):j]) {
if (!is.na(word)) {
ngrams = paste(ngrams, word)
}
}
if (is_in(ngrams,top_terms)) {
tf_coef_ngrams = df_word_cluster_i[df_word_cluster_i$terms == ngrams, columns_names[col]][1]
for (idx in i:j) {
if (tf_coef_ngrams > color_tf_coef[idx]) {
color[idx] = all_color[col]
color_tf_coef[idx] = tf_coef_ngrams
}
}
}
}
}
}
# bi-grams:
bigrams=2
nb_max_na = 3
for (i in 1:length(text_lemmatize)) {
if (!is.na(text_lemmatize[i])) {
j = i
condition = F
while (condition == F & j < i + nb_max_na) {
j = j+1
if (sum(!is.na(text_lemmatize[i:j]))==bigrams) {
condition = T
}
}
if (condition) {
ngrams = text_lemmatize[i]
for (word in text_lemmatize[(i+1):j]) {
if (!is.na(word)) {
ngrams = paste(ngrams, word)
}
}
if (is_in(ngrams,top_terms)) {
tf_coef_ngrams = df_word_cluster_i[df_word_cluster_i$terms == ngrams, columns_names[col]][1]
for (idx in i:j) {
if (tf_coef_ngrams > color_tf_coef[idx]) {
color[idx] = all_color[col]
color_tf_coef[idx] = tf_coef_ngrams
}
}
}
}
}
}
#unigrams :
for (i in 1:length(text_lemmatize)) {
if (!is.na(text_lemmatize[i])) {
if (is_in(text_lemmatize[i],top_terms)) {
tf_coef_ngrams = df_word_cluster_i[df_word_cluster_i$terms == text_lemmatize[i], columns_names[col]][1]
if (tf_coef_ngrams > color_tf_coef[i]) {
color[i] = all_color[col]
color_tf_coef[idx] = tf_coef_ngrams
}
}
}
}
}
}
nb_topic
1:length(subset_df_label$label)
for (nb_topic in 1:length(subset_df_label$label)) {
print(nb_topic)
proba = max(subset_df_document_vector_col[idx_text,])
sum_proba = sum_proba + proba
if (proba > 0.1 ) {
number_of_topic = number_of_topic + 1
col = argmax(subset_df_document_vector_col[idx_text,])[[1]]
name_col = columns_names[col]
# label :
#html = paste0(html,"<span style='text-align:center;width: 100%;background-color:",all_color[col],";color:black;border-radius: 5px;border: 2px solid #000000'>")
#html = paste0(html,' &nbsp; ',subset_df_label$label[col], ' (',round(proba,3),') &nbsp;')
#html = paste0(html,"</span>", ' ')
subset_df_document_vector_col[idx_text,col] = -1
html = paste(html, as.character(actionButton(subset_df_label$label[col], paste0(' ',subset_df_label$label[col],' (',round(proba,3),') '),
onclick = paste0("Shiny.onInputChange(\'select_button_doc\','",subset_df_label$label[col],"')"),
style=paste0("text-align:center;width: 20%;background-color:",all_color[col],";color:black;border-radius: 5px;border: 2px solid #000000"))))
# top terms à surligner
df_word_cluster_i = df_word_cluster[,c('terms',columns_names[col])]
df_word_cluster_i = df_word_cluster_i[order(-df_word_cluster_i[,columns_names[col]]),]
top_terms = df_word_cluster_i$terms[1:lim_top_termes]
## tri-grams :
trigrams=3
nb_max_na = 4
for (i in 1:length(text_lemmatize)) {
if (!is.na(text_lemmatize[i])) {
j = i
condition = F
while (condition == F & j < i + nb_max_na) {
j = j+1
if (sum(!is.na(text_lemmatize[i:j]))==trigrams) {
condition = T
}
}
if (condition) {
ngrams = text_lemmatize[i]
for (word in text_lemmatize[(i+1):j]) {
if (!is.na(word)) {
ngrams = paste(ngrams, word)
}
}
if (is_in(ngrams,top_terms)) {
tf_coef_ngrams = df_word_cluster_i[df_word_cluster_i$terms == ngrams, columns_names[col]][1]
for (idx in i:j) {
if (tf_coef_ngrams > color_tf_coef[idx]) {
color[idx] = all_color[col]
color_tf_coef[idx] = tf_coef_ngrams
}
}
}
}
}
}
Q
shiny::runApp()
html
length(subset_df_label$label)
subset_df_document_vector_col[idx_text,]
name_col
shiny::runApp()
shiny::runApp()
shiny::runApp()
sum_proba
sum_proba
sum_proba
length(unique(color[!color=='']))
number_of_topic
shiny::runApp()
shiny::runApp()
5%%2
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
l <- list()
l[[1]] = 5
names(l)
length(l)
l[["1"]] = 5
l
names(l)
as.integer("5")
substr(" ddeded",1)
substr(" ddeded",1,5)
substr(" ddeded",2,5)
" ddeded"[1]
" ddeded"[[1]]
substr(" ddeded",1,1)
highlight_text = ""
length(highlight_text) > 0 & substr(highlight_text,1,1) %in% c(" ", ".", ",", "?", ";", ":", "/", "!")
highlight_text = " zfzefzefze"
length(highlight_text) > 0 & substr(highlight_text,1,1) %in% c(" ", ".", ",", "?", ";", ":", "/", "!")
substr(" ddeded",1,length(" ddeded"))
substr(" ddeded",1,1000000L)
substr(" ddeded",1,nchar(" ddeded"))
str_sub(" ddeded",-1, -1)
str_sub(" ddeded",0, -1)
str_sub(" ddeded",0, -2)
which(c(5,6)==5)
for (variable in names(list())) {
print(variable)
}
runApp()
highlight_text
input$select_button_ann
which(dt_ann$label_df_modele_choix == input$select_button_ann)
runApp()
runApp()
runApp()
shiny::runApp()
dt_ann$list_highlights
dt_ann$list_highlights[[as.character(idx_label)]]
shiny::runApp()
shiny::runApp()
highlight_text_split
length(highlight_text_split)
highlight_text_split %>% paste()
highlight_text_split %>% paste(" ")
highlight_text_split %>% paste(collapse = " ")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ngrams
highlight_text
text_lemmatize
text_split
df_lemma
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt_ann$df_document_vector_modele_sample
dt_ann$df_document_vector_modele
dt_ann$df_document_vector_modele_sample
rownames(dt_ann$df_document_vector_modele_sample)
subset(datas$df_document_vector, modele == "blend_model")
rownames(dt_ann$df_document_vector_modele_sample[,1])
dt_ann$df_document_vector_modele_sample
dt_ann$df_document_vector_modele_sample[,1]
Q
shiny::runApp()
d<-head(iris)
d
d[["h"]] <- ""
d[which(rownames(d) == 3),] = "RE"
d
d[which(rownames(d) == 4),which(colnames(d) == "h")] = "RE"
d
grep("stre", "strea")
grep("stre", "dstrea")
grepl("stre", "dstrea", fixed = TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt_ann$df_annotated_modele_sample
dt_ann$df_document_vector_modele[which(dt_ann$df_document_vector_modele$annotate != ""),]
dt_ann$df_annotated_modele_sample
dt_ann$df_annotated_modele_sample = dt_ann$df_annotated_modele_sample[sample(1:length(dt_ann$df_annotated_modele_sample$terms)),]
dt_ann$df_annotated_modele_sample
NULL["re"]
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt_ann$df_annotated_modele_sample
dt_ann$df_document_vector_modele[which(dt_ann$df_document_vector_modele$annotated != ""),]
dt_ann$df_document_vector_modele[which(dt_ann$df_document_vector_modele$annotated != ""),]
unique(dt_ann$df_document_vector_modele$annotated)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
length(dt_ann$label_df_modele_choix$label)
output$ui_max_topic <- renderUI({
sliderInput("select_max_topic_ann", label = "Limite du nombre de top topics", min = 1,
max = length(dt_ann$label_df_modele_choix$label), value = length(dt_ann$label_df_modele_choix$label))
})
shiny::runApp()
input$select_max_topic_ann
output$select_max_topic_ann
input$ui_max_topic
input$select_max_topic_ann
shiny::runApp()
input$select_max_topic_ann
shiny::runApp()
length(subset_df_label$label)
if (is.null(input$select_max_topic_ann)) {
n_max_topics <- length(subset_df_label$label)
}else{
n_max_topics <- input$select_max_topic_ann
}
n_max_topics
n_max_topics
is.null(input$select_max_topic_ann)
n_max_topics <- length(subset_df_label$label)
n_max_topics
if (is.null(input$select_max_topic_ann)) {
n_max_topics <- length(subset_df_label$label)
}else{
n_max_topics <- input$select_max_topic_ann
}
length(subset_df_label$label)
shiny::runApp()
n_max_topics
shiny::runApp()
shiny::runApp()
length(dt_ann$label_df_modele_choix$label)
shiny::runApp()
shiny::runApp()
length(iris$Sepal.Length)
NULL["re"]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
c(NULL, 5)
shiny::runApp()
shiny::runApp()
shiny::runApp()
dt_ann$label_df_modele_choix
shiny::runApp()
shiny::runApp()
shiny::runApp()
top_terms
radioButtons("select_top_terms_to_highlight", "Top termes à surligner :",
choices = top_terms, selected = top_terms)
shiny::runApp()
shiny::runApp()
path = "C:/Users/AlexisGassmann/Documents/cdp_dataset/"
df_label = read.csv(paste0(path,'df_label','.csv'))
df_label
path = "CDP_hierar/"  # Tripadvisor_pos
#path = "C:/Users/AlexisGassmann/Documents/cdp_dataset/"
df_label = read.csv(paste0(path,'df_label','.csv'))
df_label
path = "CDP_hierar/"  # Tripadvisor_pos
path = "C:/Users/AlexisGassmann/Documents/cdp_dataset/"
df_label = read.csv(paste0(path,'df_label','.csv'))
df_label$label <- mapply(function(x){return(strsplit(x, "_")[[1]][1])}, df_label$label)
df_label <- df_label[!((duplicated(df_label[, c("label", "cluster", "modele")]) | duplicated (df_label[, c("label", "cluster", "modele")], fromLast = TRUE)) & df_label$choix == 0),]
top_topic_terms = read.csv(paste0(path,'top_topic_terms','.csv'))
df_hierarchy_top_terms = read.csv(paste0(path,'df_hierarchy_top_terms','.csv'))
df_document_vector_before = read.csv(paste0(path,'df_document_vector_before','.csv'))
df_document_vector = read.csv(paste0(path,'df_document_vector','.csv'))
df_informations = read.csv(paste0(path,'df_informations','.csv'))
df_info_classif = read.csv(paste0(path,'df_info_classif','.csv'))
df_sim_terme_topic = read.csv(paste0(path,'df_sim_terme_topic','.csv'))
df_sim_doc_topic = read.csv(paste0(path,'df_sim_doc_topic','.csv'))
df_word_cluster_tf = read.csv(paste0(path,'df_word_cluster_tf','.csv'))
df_word_cluster_tfidf = read.csv(paste0(path,'df_word_cluster_tfidf','.csv'))
df_lemma = read.csv(paste0(path,'df_lemma','.csv'))
head(top_topic_terms)
head(df_hierarchy_top_terms)
runApp()
path = "CDP_hierar/"  # Tripadvisor_pos
df_label1 = read.csv(paste0(path,'df_label','.csv'))
df_label1$label <- mapply(function(x){return(strsplit(x, "_")[[1]][1])}, df_label1$label)
df_label1 <- df_label1[!((duplicated(df_label[, c("label", "cluster", "modele")]) | duplicated (df_label[, c("label", "cluster", "modele")], fromLast = TRUE)) & df_label$choix == 0),]
top_topic_terms1 = read.csv(paste0(path,'top_topic_terms','.csv'))
df_hierarchy_top_terms1 = read.csv(paste0(path,'df_hierarchy_top_terms','.csv'))
df_document_vector_before1 = read.csv(paste0(path,'df_document_vector_before','.csv'))
df_document_vector1 = read.csv(paste0(path,'df_document_vector','.csv'))
df_informations1 = read.csv(paste0(path,'df_informations','.csv'))
df_info_classif1 = read.csv(paste0(path,'df_info_classif','.csv'))
df_sim_terme_topic1 = read.csv(paste0(path,'df_sim_terme_topic','.csv'))
df_sim_doc_topic1 = read.csv(paste0(path,'df_sim_doc_topic','.csv'))
df_word_cluster_tf1 = read.csv(paste0(path,'df_word_cluster_tf','.csv'))
df_word_cluster_tfidf1 = read.csv(paste0(path,'df_word_cluster_tfidf','.csv'))
df_lemma1 = read.csv(paste0(path,'df_lemma','.csv'))
colnames(df_label)
colnames(df_label1)
colnames(top_topic_terms)
colnames(top_topic_terms1)
colnames(df_hierarchy_top_terms)
colnames(df_hierarchy_top_terms1)
colnames(df_document_vector_before)
colnames(df_document_vector_before1)
colnames(df_document_vector)
colnames(df_document_vector1)
colnames(df_informations)
colnames(df_informations1)
colnames(df_info_classif)
colnames(df_info_classif1)
colnames(df_sim_terme_topic)
colnames(df_sim_terme_topic1)
colnames(df_sim_doc_topic)
colnames(df_sim_doc_topic1)
colnames(df_word_cluster_tf)
colnames(df_word_cluster_tf1)
colnames(df_word_cluster_tfidf)
colnames(df_word_cluster_tfidf1)
colnames(df_lemma)
colnames(df_lemma1)
View(df_document_vector_before)
View(df_document_vector_before1)
View(df_document_vector1)
View(df_word_cluster_tf)
path = "CDP_hierar/"  # Tripadvisor_pos
path = "C:/Users/AlexisGassmann/Documents/cdp_dataset/"
df_label = read.csv(paste0(path,'df_label','.csv'))
df_label$label <- mapply(function(x){return(strsplit(x, "_")[[1]][1])}, df_label$label)
df_label <- df_label[!((duplicated(df_label[, c("label", "cluster", "modele")]) | duplicated (df_label[, c("label", "cluster", "modele")], fromLast = TRUE)) & df_label$choix == 0),]
top_topic_terms = read.csv(paste0(path,'top_topic_terms','.csv'))
df_hierarchy_top_terms = read.csv(paste0(path,'df_hierarchy_top_terms','.csv'))
df_document_vector_before = read.csv(paste0(path,'df_document_vector_before','.csv'))
df_document_vector = read.csv(paste0(path,'df_document_vector','.csv'))
df_informations = read.csv(paste0(path,'df_informations','.csv'))
df_info_classif = read.csv(paste0(path,'df_info_classif','.csv'))
df_sim_terme_topic = read.csv(paste0(path,'df_sim_terme_topic','.csv'))
df_sim_doc_topic = read.csv(paste0(path,'df_sim_doc_topic','.csv'))
df_word_cluster_tf = read.csv(paste0(path,'df_word_cluster_tf','.csv'))
df_word_cluster_tfidf = read.csv(paste0(path,'df_word_cluster_tfidf','.csv'))
df_lemma = read.csv(paste0(path,'df_lemma','.csv'))
head(df_document_vector )
View(datas)
View(df_document_vector)
df_document_vector = read.csv(paste0(path,'df_document_vector','.csv'))
View(df_document_vector)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
